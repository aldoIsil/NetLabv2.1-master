@model List<Model.ViewModels.EnfermedadDatos>
<style type="text/css">
    .nav-container{
        border: 1px solid #c5c5c5;
    }
    .tab-content{
        padding: 1em 1.4em;
    }
    ul.ulcss {
        border: 1px solid #dddddd;
        background: #e9e9e9;
        color: #333333;
        font-weight: bold;
        margin: 0;
        padding: .2em .2em 0;
    }

    ul.ulcss > li a {
        border: 1px solid #c5c5c5;
        background: #f6f6f6;
        font-weight: normal;
        color: #454545;
    }
    ul.ulcss > li.active a {
        border: 1px solid #003eff !important;
        background: #007fff !important;
        font-weight: normal;
        color: #ffffff !important;
    }
    .nopaddingleft{
        padding-left: 0px !important;
    }
    .paddingtop10{
        padding-top: 10px;
    }
</style>
<div class="nav-container">
    <ul class="nav nav-tabs ulcss" id="dctabs" role="tablist">
        @for (int i = 0; i < Model.GroupBy(x => x.IdEnfermedad).Count(); i++)
        {
            var item = Model.GroupBy(x => x.IdEnfermedad).ToList()[i];
            <li><a data-toggle="tab" href="@("#tab"+item.Key)">@item.First().EnfermedadNombre</a></li>
        }
    </ul>

    <div class="tab-content" id="nav-tabContent">
        @{
            int c = 0;
        }
        @foreach (var item in Model.GroupBy(x => x.IdEnfermedad))
        {
            <div class="tab-pane my-tab-pane fade" id="@("tab" + item.Key)">

                @for (int i = 0; i < item.GroupBy(g => g.IdCategoriaDato).Count(); i++)
                {
                    var categoria = item.GroupBy(g => g.IdCategoriaDato).ToList()[i];
                    if (categoria.Count() > 0)
                    {
                        var columnas = categoria.First().Orientacion < 3 ? 3 : 12 / categoria.First().Orientacion;
                        //columnas = columnas > 10 ? 10 : columnas;
                        string clase = categoria.GroupBy(dd => dd.IdDato).Count() > 5 || categoria.GroupBy(dd => dd.IdDato).Count() < 4 ? "col-xs-12 col-md-3" : string.Format("col-xs-12 col-md-{0}", columnas);
                        //string clase = string.Format("col-xs-12 col-md-{0}", columnas);

                        <div style="clear:both;">
                            <h4>@categoria.First().CategoriaNombre</h4>
                            @for (int y = 0; y < categoria.GroupBy(dd => dd.IdDato).Count() + 1; y++)
                            {
                                var nroColumnas = categoria.First().Orientacion;
                        <div class="div-row" style="clear:both;">
                            @for (int z = y * nroColumnas; z < y * nroColumnas + nroColumnas; z++)
                            {
                                if (z < categoria.GroupBy(dd => dd.IdDato).Count())
                                {
                                    var dato = categoria.GroupBy(dd => dd.IdDato).ToList()[z].First();
                                    var datos = categoria.GroupBy(dd => dd.IdDato);
                                    var indiceTotal = c;
                                    c++;
                                    @Html.Hidden(string.Format("OrdenDatosClinicos[{0}].IdDato", indiceTotal), dato.IdDato)
                                    @Html.Hidden(string.Format("OrdenDatosClinicos[{0}].IdOrden", indiceTotal), dato.IdOrden)
                                    @Html.Hidden(string.Format("OrdenDatosClinicos[{0}].IdEnfermedad", indiceTotal), dato.IdEnfermedad)
                                    @Html.Hidden(string.Format("OrdenDatosClinicos[{0}].IdCategoriaDato", indiceTotal), dato.IdCategoriaDato)
                                    <div class="col-xs-12 col-md-1">
                                        @Html.Label(dato.DatoNombre)
                                    </div>

                                    switch (dato.IdTipoDato)
                                    {
                                        case Enums.TipoCampo.TEXT:
                                            <div class="@clase nopaddingleft">
                                                <div class="div-row paddingtop10">
                                                    <div class="col-xs-12 col-md-6">
                                                        @*<input type="text" id="@dato.IdDato" name="@dato.IdDato" class="form-control" />*@
                                                        <input type="text" id="@string.Format("OrdenDatosClinicos[{0}].Valor", indiceTotal)" name="@string.Format("OrdenDatosClinicos[{0}].Valor", indiceTotal)" />
                                                    </div>
                                                    <div class="col-xs-12 col-md-6">
                                                        <div class="div-row paddingtop10">
                                                            <div class="col-xs-8 col-md-8">@Html.Label("No Precisa")</div>
                                                            <div class="col-xs-4 col-md-4">
                                                                @*<input type="checkbox" id="@string.Format("OrdenDatosClinicos[{0}].NoPrecisa", indiceTotal)" name="@string.Format("OrdenDatosClinicos[{0}].NoPrecisaString", indiceTotal)" />*@
                                                                @Html.CheckBox(string.Format("OrdenDatosClinicos[{0}].NoPrecisa", indiceTotal), new { @class = "chcknoprecisa", data_id = dato.IdDato, data_indx = indiceTotal, data_isdt = false })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            break;
                                        case Enums.TipoCampo.DATE:
                                            <div class="@clase nopaddingleft">
                                                <div class="div-row paddingtop10">
                                                    <div class="col-xs-12 col-md-6">
                                                        <input type="text" id="@string.Format("OrdenDatosClinicos[{0}].Valor", indiceTotal)" name="@string.Format("OrdenDatosClinicos[{0}].Valor", indiceTotal)" placeholder="dd/mm/yyyy" class="form-control fechasdatoclinico" />
                                                    </div>
                                                    <div class="col-xs-12 col-md-6">
                                                        <div class="div-row paddingtop10">
                                                            <div class="col-xs-8 col-md-8">@Html.Label("No Precisa")</div>
                                                            <div class="col-xs-4 col-md-4">
                                                                @*<input type="checkbox" id="@string.Format("OrdenDatosClinicos[{0}].NoPrecisa", indiceTotal)" name="@string.Format("OrdenDatosClinicos[{0}].NoPrecisaString", indiceTotal)" />*@
                                                                @Html.CheckBox(string.Format("OrdenDatosClinicos[{0}].NoPrecisa", indiceTotal), new { @class = "chcknoprecisa", data_id = dato.IdDato, data_indx = indiceTotal, data_isdt = true })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            break;
                                        case Enums.TipoCampo.CHECKBOX:
                                        case Enums.TipoCampo.COMBO:
                                            <div class="col-xs-12 col-md-2 paddingtop10">
                                                <select id="@string.Format("OrdenDatosClinicos[{0}].Valor", indiceTotal)" name="@string.Format("OrdenDatosClinicos[{0}].Valor", indiceTotal)" class="form-control">
                                                    @foreach (var opcion in datos.Where(x => x.Key == dato.IdDato).First())
                                                    {
                                                        if (opcion.Obligatorio && opcion.OpcionDatoValor.ToLower() == "no precisa")
                                                        { }
                                                        else if (!opcion.Obligatorio && opcion.OpcionDatoValor.ToLower() == "no precisa")
                                                        {
                                                            <option value="@opcion.idOpcionDato" selected>@opcion.OpcionDatoValor</option>
                                                        }
                                                        else
                                                        {
                                                            if (datos.Where(x => x.Key == dato.IdDato).First().Count() == 1)
                                                            {
                                                                <option value="@opcion.idOpcionDato" selected>@opcion.OpcionDatoValor</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@opcion.idOpcionDato">@opcion.OpcionDatoValor</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                            </div>
                                            break;
                                        case Enums.TipoCampo.NUMERIC:
                                            <span>numeric</span>
                                            break;
                                        case Enums.TipoCampo.TEXTAREA:
                                            <span>textarea</span>
                                            break;
                                        default:
                                            <span>default</span>
                                            break;
                                    }

                                }
                            }
                        </div>
                            }
                        </div>
                    }
                }
            </div>
        }
    </div>
</div>
<script type="text/javascript">
    $(function () {
        SetDatoClinicoDatePickerMaxValue();
        $('#dctabs li:first-child a').tab('show');
        $('.chcknoprecisa').change(function (e) {
            e.preventDefault();
            //console.log("conforme id: ", $(this).data("id"));
            //console.log("index: ", $(this).data("indx"));
            $(this).val(this.checked);
            if (this.checked) {
                if ($(this).data("isdt") == "True") {
                    $("input[name='OrdenDatosClinicos[" + $(this).data("indx") + "].Valor']").data('kendoDatePicker').enable(false);
                } else {
                    $("input[name='OrdenDatosClinicos[" + $(this).data("indx") + "].Valor']").attr("disabled", "disabled");
                }

                $("input[name='OrdenDatosClinicos[" + $(this).data("indx") + "].Valor']").val("");
            } else {
                if ($(this).data("isdt") == "True") {
                    $("input[name='OrdenDatosClinicos[" + $(this).data("indx") + "].Valor']").data('kendoDatePicker').enable(true);
                } else {
                    $("input[name='OrdenDatosClinicos[" + $(this).data("indx") + "].Valor']").removeAttr("disabled");
                }
            }
        });
    });
</script>